//================================================================
//  This code is generated by Lei Qin for the project in ELEN30010
//================================================================

module MyComputer(
	//////////// CLOCK (1 bit) //////////
	input Clock,
	
	//////////// LED FOR GPO (general purpose output) (6 bit on right) //////////	
	//////////// LED FOR DEBUG (4 bit on left) //////////
	output [9:0]LEDR,
	
	//////////// SWITCH FOR DIN (data in) (8 bit on right) //////////
	//////////// SWITCH FOR Turbo (1 bit on middle) //////////
	//////////// SWITCH FOR RESET (1 bit on left) //////////
	input [9:0]SW,
	
	//////////// PUSH BUTTON FOR SAMPLE (invert version) (1 bit on left) //////////
	//////////// PUSH BUTTON FOR BTNS (invert version) (3 bit on right) //////////
	input [3:0]KEY,
	
	//////////// SEVEN SEGMENT //////////
	output [6:0]HEX0,
	output [6:0]HEX1,
	output [6:0]HEX2,
	output [6:0]HEX3,
	output [6:0]HEX4,
	output [6:0]HEX5

);

	//=======================================================
	//  DEFINE CPU REG/WIRE
	//=======================================================
	
	wire [2:0]Btns;  //Three buttons. On a falling edge, a “button release” will be recorded.
	wire [7:0]Din;  //Allows the CPU to read in an 8-bit number. Must be kept stable around the time when the Sample pin goes from HIGH to LOW (falling edge).
	wire Rest;  //When HIGH, reset CPU. Minimum pulse duration should be 25 ms.
	wire Sample;  //On the falling edge, data on the Din pins will be clocked into the CPU.
	wire Turbo;  //When HIGH, CPU will run at full speed.
	
	wire [3:0]Debug;  //Used to pass information out of CPU module
	wire [7:0]Dout;  //(Data Output) Used to output a number
	wire Dval;  //(Data Valid) HIGH if Dout is valid
	wire [5:0]GPO;  //(General Purpose Output) Additional output lines for CPU
	wire [7:0]IP;  //(Instruction Pointer)  Current value of IP register
	
	//=======================================================
	//  MAIN STRUCTURE
	//=======================================================
	 
	Debounce db(.clk(Clock), .x(SW[9]), .y(Reset));
	CPU cpu(.Btns(KEY[2:0]), .Clock(Clock), .Din(SW[7:0]), .Reset(Reset), .Sample(KEY[3]), 
			.Turbo(SW[8]), .Debug(Debug), .Dout(Dout), .Dval(Dval), .GPO(GPO), .IP_OUT(IP));
	Disp2cNum dnum(.enable(Dval), .x(Dout), .H0(HEX0), .H1(HEX1), .H2(HEX2), .H3(HEX3));
	DispHex dh(.x(IP), .H0(HEX4), .H1(HEX5));
	assign LEDR = {Debug, GPO};

endmodule

